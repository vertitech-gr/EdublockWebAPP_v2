using Edu_Block.DAL.EF;
using Edu_Block_dev.CQRS.Commands.EduShareCredential;
using Edu_Block_dev.DAL.EF;
using Edu_Block_dev.Modal.DTO;
using MediatR;
using System;
using System.Security.Cryptography;


namespace Edu_Block_dev.CQRS.Command_Handler.EduShareCredential
{
    public class ShareCredentialCommandHandler : IRequestHandler<ShareCredentialCommand, ShareCredential>
    {
        private readonly EduBlockDataContext _context;
        private readonly IMediator _mediator;

        public ShareCredentialCommandHandler(EduBlockDataContext context, IMediator mediator)
        {
            _mediator = mediator;
            _context = context;
        }

        public async Task<ShareCredential> Handle(ShareCredentialCommand request, CancellationToken cancellationToken)
        {
            var result = MapShareDtoToEntity(request.shareCredentialDTO);

            _context.ShareCredentials.Add(result);
            await _context.SaveChangesAsync();

            return result;
        }

        private ShareCredential MapShareDtoToEntity(ShareCredentialDTO dto)
        {
            string autoGeneratedPassword = GenerateRandomPassword();

            return new ShareCredential
            {
                CredentialId = dto.CredentialId,
                Password = autoGeneratedPassword,
                ShareId = dto.ShareId,
            };
        }

        private string GenerateRandomPassword()
        {
            using (RandomNumberGenerator rng = new RNGCryptoServiceProvider())
            {
                byte[] randomBytes = new byte[8];
                rng.GetBytes(randomBytes);
                return Convert.ToBase64String(randomBytes);
            }
        }
    }
}
